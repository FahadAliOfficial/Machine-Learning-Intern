{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1MRgSV-5Boh1M7mAUE6ac2iJdBt08blky","authorship_tag":"ABX9TyOQDxwFntwOGOXtJ5GEzv3o"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"bhERUuxHIZYX"},"outputs":[],"source":["!pip install kaggle\n","\n","!mkdir ~/.kaggle\n","\n","!mv kaggle.json ~/.kaggle/\n","\n","!chmod 600 ~/.kaggle/kaggle.json"]},{"cell_type":"code","source":["!kaggle datasets download gti-upm/leapgestrecog"],"metadata":{"id":"PCHcjsAsIfPA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","\n","!unzip /content/leapgestrecog.zip"],"metadata":{"id":"iwv8hfhlIg4_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import os\n","import cv2\n","\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","from keras.preprocessing.image import ImageDataGenerator\n","\n","from tensorflow import keras\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Flatten\n","from keras.layers import Conv2D, MaxPooling2D\n","\n","import matplotlib.pyplot as plt"],"metadata":{"id":"smWDzdhUIsFr","executionInfo":{"status":"ok","timestamp":1720003982076,"user_tz":420,"elapsed":13640,"user":{"displayName":"Fahad Ali","userId":"17136433978282586400"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["dir = '/content/drive/MyDrive/Colab Notebooks/ProdigyInfoTech/Task 4/leapGestRecog'\n",""],"metadata":{"id":"dEbV_fGVItR1","executionInfo":{"status":"ok","timestamp":1720004174217,"user_tz":420,"elapsed":359,"user":{"displayName":"Fahad Ali","userId":"17136433978282586400"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["\n","images = []\n","labels = []\n","for directory in os.listdir(dir):\n","  for subDir in os.listdir(os.path.join(dir,directory)):\n","    for img in os.listdir(os.path.join(dir, directory, subDir)):\n","      img_path = os.path.join(dir, directory, subDir, img)\n","      images.append(img_path)\n","      labels.append(subDir)"],"metadata":{"id":"OOqKFBRhIuMr","executionInfo":{"status":"ok","timestamp":1720004175550,"user_tz":420,"elapsed":5,"user":{"displayName":"Fahad Ali","userId":"17136433978282586400"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["Iseries = pd.Series(images, name=\"Images\")\n","Lseries = pd.Series(labels, name=\"labels\")\n","hand_gesture_data = pd.concat([Iseries, Lseries], axis=1)\n","hand_gesture_df = pd.DataFrame(hand_gesture_data)"],"metadata":{"id":"B4LfGV3WIvNl","executionInfo":{"status":"ok","timestamp":1720004179497,"user_tz":420,"elapsed":373,"user":{"displayName":"Fahad Ali","userId":"17136433978282586400"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["\n","print(hand_gesture_df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H0Qja8kaIwgc","executionInfo":{"status":"ok","timestamp":1720004181574,"user_tz":420,"elapsed":15,"user":{"displayName":"Fahad Ali","userId":"17136433978282586400"}},"outputId":"015d9c9d-7548-498a-e824-0fd98fc15eb8"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Empty DataFrame\n","Columns: [Images, labels]\n","Index: []\n"]}]},{"cell_type":"code","source":["\n","\n","pd.Series(labels).value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A2D-i71aIxW2","executionInfo":{"status":"ok","timestamp":1720004184055,"user_tz":420,"elapsed":578,"user":{"displayName":"Fahad Ali","userId":"17136433978282586400"}},"outputId":"b7e8a5a7-6a97-44d0-b643-f84ea50a153b"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Series([], Name: count, dtype: int64)"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["X_train, X_test = train_test_split(hand_gesture_df, test_size=0.2, random_state=42)\n","train_set, val_set = train_test_split(hand_gesture_df, test_size=0.3, random_state=42)\n",""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"uXfumJL_IymE","executionInfo":{"status":"error","timestamp":1720004185875,"user_tz":420,"elapsed":23,"user":{"displayName":"Fahad Ali","userId":"17136433978282586400"}},"outputId":"42727773-705d-4a9f-b864-abd8ce93ff82"},"execution_count":18,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"With n_samples=0, test_size=0.2 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-6d32809b9903>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhand_gesture_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mtrain_set\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_set\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhand_gesture_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_split.py\u001b[0m in \u001b[0;36mtrain_test_split\u001b[0;34m(test_size, train_size, random_state, shuffle, stratify, *arrays)\u001b[0m\n\u001b[1;32m   2560\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2561\u001b[0m     \u001b[0mn_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_num_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2562\u001b[0;31m     n_train, n_test = _validate_shuffle_split(\n\u001b[0m\u001b[1;32m   2563\u001b[0m         \u001b[0mn_samples\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdefault_test_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.25\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2564\u001b[0m     )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_split.py\u001b[0m in \u001b[0;36m_validate_shuffle_split\u001b[0;34m(n_samples, test_size, train_size, default_test_size)\u001b[0m\n\u001b[1;32m   2234\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2235\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mn_train\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2236\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m   2237\u001b[0m             \u001b[0;34m\"With n_samples={}, test_size={} and train_size={}, the \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2238\u001b[0m             \u001b[0;34m\"resulting train set will be empty. Adjust any of the \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: With n_samples=0, test_size=0.2 and train_size=None, the resulting train set will be empty. Adjust any of the aforementioned parameters."]}]},{"cell_type":"code","source":["image_gen = ImageDataGenerator(preprocessing_function= tf.keras.applications.mobilenet_v2.preprocess_input)\n","train = image_gen.flow_from_dataframe(dataframe= train_set,x_col=\"Images\",y_col=\"labels\",\n","                                      target_size=(244,244),\n","                                      color_mode='rgb',\n","                                      class_mode=\"categorical\",\n","                                      batch_size=4,\n","                                      shuffle=False\n","                                     )\n","test = image_gen.flow_from_dataframe(dataframe= X_test,x_col=\"Images\", y_col=\"labels\",\n","                                     target_size=(244,244),\n","                                     color_mode='rgb',\n","                                     class_mode=\"categorical\",\n","                                     batch_size=4,\n","                                     shuffle= False\n","                                    )\n","val = image_gen.flow_from_dataframe(dataframe= val_set,x_col=\"Images\", y_col=\"labels\",\n","                                    target_size=(244,244),\n","                                    color_mode= 'rgb',\n","                                    class_mode=\"categorical\",\n","                                    batch_size=4,\n","                                    shuffle=False\n","                                   )"],"metadata":{"id":"FrbzaGmHIzw6","executionInfo":{"status":"aborted","timestamp":1720003983396,"user_tz":420,"elapsed":17,"user":{"displayName":"Fahad Ali","userId":"17136433978282586400"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["classes=list(train.class_indices.keys())\n","print (classes)\n",""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":176},"id":"ARSBgG56I05h","executionInfo":{"status":"error","timestamp":1720003983763,"user_tz":420,"elapsed":17,"user":{"displayName":"Fahad Ali","userId":"17136433978282586400"}},"outputId":"f7be88d0-a3c5-465f-a9e4-3f177abe4777"},"execution_count":4,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'train' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-f9a36df4288e>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mclasses\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_indices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mclasses\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'train' is not defined"]}]},{"cell_type":"code","source":["def show_hand_gesture(image_gen):\n","    test_dict = test.class_indices\n","    classes = list(test_dict.keys())\n","    images, labels=next(image_gen)\n","    plt.figure(figsize=(20,20))\n","    length = len(labels)\n","    if length<25:\n","        r=length\n","    else:\n","        r=25\n","    for i in range(r):\n","        plt.subplot(5,5,i+1)\n","        image=(images[i]+1)/2\n","        plt.imshow(image)\n","        index=np.argmax(labels[i])\n","        class_name=classes[index]\n","        plt.title(class_name, color=\"green\",fontsize=16)\n","        plt.axis('off')\n","    plt.show()"],"metadata":{"id":"ovy3xxgnI1xi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["show_hand_gesture(train)"],"metadata":{"id":"Sb3ybB97I26J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = keras.models.Sequential([\n","    keras.layers.Conv2D(filters=128, kernel_size=(8, 8), strides=(3, 3), activation='relu', input_shape=(224, 224, 3)),\n","    keras.layers.BatchNormalization(),\n","\n","    keras.layers.Conv2D(filters=256, kernel_size=(5, 5), strides=(1, 1), activation='relu', padding=\"same\"),\n","    keras.layers.BatchNormalization(),\n","    keras.layers.MaxPool2D(pool_size=(3, 3)),\n","\n","    keras.layers.Conv2D(filters=256, kernel_size=(3, 3), strides=(1, 1), activation='relu', padding=\"same\"),\n","    keras.layers.BatchNormalization(),\n","    keras.layers.Conv2D(filters=256, kernel_size=(1, 1), strides=(1, 1), activation='relu', padding=\"same\"),\n","    keras.layers.BatchNormalization(),\n","    keras.layers.Conv2D(filters=256, kernel_size=(1, 1), strides=(1, 1), activation='relu', padding=\"same\"),\n","    keras.layers.BatchNormalization(),\n","\n","    keras.layers.Conv2D(filters=512, kernel_size=(3, 3), activation='relu', padding=\"same\"),\n","    keras.layers.BatchNormalization(),\n","    keras.layers.MaxPool2D(pool_size=(2, 2)),\n","\n","    keras.layers.Conv2D(filters=512, kernel_size=(3, 3), activation='relu', padding=\"same\"),\n","    keras.layers.BatchNormalization(),\n","\n","    keras.layers.Conv2D(filters=512, kernel_size=(3, 3), activation='relu', padding=\"same\"),\n","    keras.layers.BatchNormalization(),\n","\n","    keras.layers.MaxPool2D(pool_size=(2, 2)),\n","\n","    keras.layers.Conv2D(filters=512, kernel_size=(3, 3), activation='relu', padding=\"same\"),\n","    keras.layers.BatchNormalization(),\n","\n","    keras.layers.MaxPool2D(pool_size=(2, 2)),\n","\n","    keras.layers.Flatten(),\n","    keras.layers.Dense(1024, activation='relu'),\n","    keras.layers.Dropout(0.5),\n","    keras.layers.Dense(1024, activation='relu'),\n","    keras.layers.Dropout(0.5),\n","    keras.layers.Dense(10, activation='softmax')\n","])\n","\n","model.compile(\n","    loss='categorical_crossentropy',\n","    optimizer=tf.optimizers.SGD(learning_rate=0.001),\n","    metrics=['accuracy']\n",")\n","\n","model.summary()"],"metadata":{"id":"swIwSRBRI4G6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from keras.utils import plot_model\n","\n","plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)\n",""],"metadata":{"id":"HX4t23hqI5t8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["history = model.fit(train, epochs=3, validation_data=val, verbose=1)"],"metadata":{"id":"T5zyN8k0I7l-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.evaluate(test, verbose=1)\n"],"metadata":{"id":"LDQyxJjWI89g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.save(\"hand_gesture_Model.h5\")"],"metadata":{"id":"4P6TSqWGI-88"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from keras.models import load_model\n","model = load_model('hand_gesture_Model.h5')"],"metadata":{"id":"5IwUvMFrJAbI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.preprocessing import image\n","\n","# Load the image\n","img = image.load_img('/content/download.jfif')\n","\n","# Resize the image to the expected size\n","img = img.resize((224, 224))\n","\n","# Convert the image to a NumPy array\n","img_array = image.img_to_array(img)\n","\n","# Expand the dimensions of the array\n","img_array = np.expand_dims(img_array, axis=0)\n","\n","# Predict the gesture\n","predictions = model.predict(img_array)\n","\n","# Get the gesture name\n","gesture_name = np.argmax(predictions)\n","\n","# Print the predicted gesture\n","print(f'Predicted gesture: {gesture_name}')"],"metadata":{"id":"zNhzeOCeJCAL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predictions = model.predict(img_array)\n","gesture_name = np.argmax(predictions)\n","print(f'Predicted gesture: {gesture_name}')"],"metadata":{"id":"7GHi_DFTJEWl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","pred = model.predict(test)\n","pred = np.argmax(pred, axis=1)\n","\n","labels = (train.class_indices)\n","labels = dict((v,k) for k,v in labels.items())\n","pred2 = [labels[k] for k in pred]\n",""],"metadata":{"id":"yJDAfs1aJFWG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","\n","plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.title('model accuracy')\n","plt.ylabel('accuracy')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()"],"metadata":{"id":"K5_kgblEJGbL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()\n",""],"metadata":{"id":"AFSAExk5JHhl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n","\n","y_test = X_test.labels\n","print(classification_report(y_test, pred2))\n","print(\"Accuracy of the Model:\",\"{:.1f}%\".format(accuracy_score(y_test, pred2)*100))\n"],"metadata":{"id":"ueQfkkTPJJG_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","\n","class_labels = ['Palm', 'l', 'Fist', 'Fist_moved', 'Thumb', 'Index', 'Ok', 'Palm_moved', 'C', 'Down']\n","\n","cm = confusion_matrix(y_test, pred2)\n","\n","plt.figure(figsize=(10, 5))\n","sns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Blues')\n","\n","plt.xticks(ticks=[0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5], labels=class_labels, rotation=25)\n","plt.yticks(ticks=[0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5], labels=class_labels, rotation=0)\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")\n","\n","plt.title(\"Confusion Matrix\")\n","\n","plt.show()"],"metadata":{"id":"4_yqhw17JKFC"},"execution_count":null,"outputs":[]}]}